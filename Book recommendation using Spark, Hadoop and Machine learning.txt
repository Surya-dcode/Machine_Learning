{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6862f6e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+\n",
      "|Title                                                                                                                |categories                                                                                                                                                                                                                                      |avg_rating_title  |\n",
      "+---------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+\n",
      "|\"\"\"Shakespeare\"\" identified in Edward De Vere                                                                        |NULL                                                                                                                                                                                                                                            |1.295568E9        |\n",
      "|\"\"\"Charge that to my account                                                                                         | but above a servant                                                                                                                                                                                                                            |1.2108384E9       |\n",
      "|Theatres of San Francisco (CA) (Images of America)                                                                   | the openings of the Bay and Golden Gate Bridges                                                                                                                                                                                                |68.8              |\n",
      "|\"Management Secrets of the New England Patriots: From \"\"Patsies\"\" to two-time Super Bowl champs; Vol. 1: Achievements| and motivating. Entertains and informs with humorous                                                                                                                                                                                           |19.949999999999996|\n",
      "|GOD'S LITTLE ACRE                                                                                                    |['Fiction']                                                                                                                                                                                                                                     |14.566666666666666|\n",
      "|God's Little Acre                                                                                                    |['Fiction']                                                                                                                                                                                                                                     |14.566666666666666|\n",
      "|God's little acre                                                                                                    |NULL                                                                                                                                                                                                                                            |14.566666666666666|\n",
      "|20 Poemas De Amor Y Una Cancion Desesperada / 20 Poems And A Desperate Song (Joyas Edaf) (Spanish Edition)           |['Electronic books']                                                                                                                                                                                                                            |5.0               |\n",
      "|\"Control System Power and Grounding Better Practice (\"\"Control Engineering\"\")\"                                       | in ongoing standards efforts. Control Engineering and several power and grounding experts have developed this control system power and grounding resource. When used in conjunction with control system manufacturer installation documentation|5.0               |\n",
      "|(GW 1098) The Complete Book of Emigrants in Bondage, 1614-1775                                                       |['Reference']                                                                                                                                                                                                                                   |5.0               |\n",
      "+---------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import count, col, avg, collect_list, udf, desc\n",
    "from pyspark.ml.linalg import SparseVector\n",
    "from pyspark.sql.types import ArrayType, DoubleType\n",
    "from pyspark.ml.linalg import Vectors\n",
    "from pyspark.ml.feature import BucketedRandomProjectionLSH, Normalizer\n",
    "from pyspark.ml.recommendation import ALS\n",
    "import plotly.express as px\n",
    "\n",
    "# Create a SparkSession\n",
    "spark = SparkSession.builder \\\n",
    "    .appName(\"Analysis\") \\\n",
    "    .getOrCreate()\n",
    "\n",
    "# # Specify the path to your data in HDFS\n",
    "# hdfs_path = \"hdfs://<namenode_address>/<path_to_data>\"\n",
    "\n",
    "\n",
    "# Specify the path to your data\n",
    "file_path1 = \"Books_rating.csv\"\n",
    "file_path2 = \"books_data.csv\"\n",
    "\n",
    "# Load the datasets \n",
    "books_rating = spark.read.csv(file_path1, header=True, inferSchema=True)\n",
    "books_data = spark.read.csv(file_path2, header=True, inferSchema=True)\n",
    "\n",
    "# Considering only the required columns\n",
    "books_rating = books_rating[['Id','Title','User_id','review/score']]     ##### price not considered\n",
    "books_data = books_data[['Title','authors','publisher','categories']]\n",
    "\n",
    "# renaming columns names for convenience\n",
    "books_rating = books_rating.withColumnRenamed(\"review/score\", \"rating\")\n",
    "\n",
    "# joining 2 datasets with 'Title' as common feature\n",
    "books  = books_rating.join(books_data,\"Title\",\"inner\")\n",
    "\n",
    "# 1.Identifying and displaying top 10 books by its average rating\n",
    "\n",
    "# grouping by title & category and calculating average of each rating for all the books\n",
    "avg_rating_title = books.groupBy(\"Title\",\"categories\").agg(avg(\"rating\").alias(\"avg_rating_title\"))\n",
    "\n",
    "# Displaying top 10 books\n",
    "top_10_books = avg_rating_title.orderBy(desc(\"avg_rating_title\")).limit(10)\n",
    "top_10_books.show(truncate=False)\n",
    "\n",
    "\n",
    "# 2.Plotting top 5 books of each category\n",
    "\n",
    "# Grouping by category and calculating the average rating for each book\n",
    "avg_rating_category = books.groupBy(\"categories\",\"Title\").agg(avg(\"rating\").alias(\"avg_rating_category\"))                                                      \n",
    "\n",
    "# Ranking books by average rating within each category\n",
    "window_spec = Window.partitionBy(\"categories\").orderBy(desc(\"avg_rating_category\"))\n",
    "ranked_df = avg_rating_category.withColumn(\"rank\", row_number().over(window_spec))\n",
    "\n",
    "# Selecting the top 5 books in each category based on average rating\n",
    "top_5_books_per_category = ranked_df.filter(col(\"rank\") <= 5).drop(\"rank\")\n",
    "\n",
    "# Converting PySpark DataFrame to Pandas DataFrame for plotting\n",
    "top_5_books_per_category_pandas = top_5_books_per_category.toPandas()                                                             \n",
    "                                                              \n",
    "# Creating plots for each category\n",
    "for category in top_5_books_per_category_pandas['categories'].unique():\n",
    "    category_data = top_5_books_per_category_pandas[top_5_books_per_category_pandas['categories'] == category]\n",
    "\n",
    "    fig = px.bar(category_data, x='avg_rating', y='title',\n",
    "                 title=f'Top 5 Books in {category} by Average Rating',\n",
    "                 labels={'avg_rating_category': 'Average Rating', 'Title': 'Book Title'},\n",
    "                 orientation='h')  # Horizontal bar chart\n",
    "    fig.show()\n",
    "\n",
    "# 3.Displaying top 10 publishers \n",
    "# Grouping by publishers and calculating the average rating\n",
    "avg_rating_publisher = books.groupBy(\"publisher\").agg(avg(\"rating\").alias(\"avg_rating_publisher\")).orderBy(desc(\"avg_rating_publisher\")).limit(10)\n",
    "\n",
    "# Converting PySpark DataFrame to Pandas DataFrame for plotting\n",
    "avg_rating_publisher_pandas = avg_rating_publisher.toPandas()                                                              \n",
    "                                                              \n",
    "# Plotting the data using Plotly\n",
    "fig = px.bar(avg_rating_publisher_pandas, y='publisher', x='avg_rating_publisher',\n",
    "             title='Top 10 Publishers by Average Rating',\n",
    "             labels={'avg_rating_publisher': 'Average Rating', 'publisher': 'Publisher'},\n",
    "             orientation='h')\n",
    "fig.show()                                                              \n",
    "\n",
    "# 4.Displaying top 10 authors \n",
    "\n",
    "# grouping by authors and calculating the average rating\n",
    "avg_rating_author = books.groupBy(\"authors\").agg(avg(\"rating\").alias(\"avg_rating_author\")).orderBy(desc(\"avg_rating_author\")).limit(10)\n",
    "\n",
    "# Converting PySpark DataFrame to Pandas DataFrame for plotting\n",
    "avg_rating_author_pandas = avg_rating_author.toPandas()                                                              \n",
    "                                                              \n",
    "# Plotting the data using Plotly\n",
    "fig = px.bar(avg_rating_author_pandas, y='authors', x='avg_rating_author',\n",
    "             title='Top 10 Authors by Average Rating',\n",
    "             labels={'avg_rating_author': 'Average Rating', 'authors': 'Author'},\n",
    "             orientation='h')\n",
    "fig.show()             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96f96fdd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
